/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SensorEventService } from "../sensorEvent.service";
import { SensorEventCreateInput } from "./SensorEventCreateInput";
import { SensorEvent } from "./SensorEvent";
import { SensorEventFindManyArgs } from "./SensorEventFindManyArgs";
import { SensorEventWhereUniqueInput } from "./SensorEventWhereUniqueInput";
import { SensorEventUpdateInput } from "./SensorEventUpdateInput";

export class SensorEventControllerBase {
  constructor(protected readonly service: SensorEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SensorEvent })
  async createSensorEvent(
    @common.Body() data: SensorEventCreateInput
  ): Promise<SensorEvent> {
    return await this.service.createSensorEvent({
      data: data,
      select: {
        createdAt: true,
        deviceId: true,
        eventData: true,
        eventType: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SensorEvent] })
  @ApiNestedQuery(SensorEventFindManyArgs)
  async sensorEvents(@common.Req() request: Request): Promise<SensorEvent[]> {
    const args = plainToClass(SensorEventFindManyArgs, request.query);
    return this.service.sensorEvents({
      ...args,
      select: {
        createdAt: true,
        deviceId: true,
        eventData: true,
        eventType: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SensorEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sensorEvent(
    @common.Param() params: SensorEventWhereUniqueInput
  ): Promise<SensorEvent | null> {
    const result = await this.service.sensorEvent({
      where: params,
      select: {
        createdAt: true,
        deviceId: true,
        eventData: true,
        eventType: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SensorEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSensorEvent(
    @common.Param() params: SensorEventWhereUniqueInput,
    @common.Body() data: SensorEventUpdateInput
  ): Promise<SensorEvent | null> {
    try {
      return await this.service.updateSensorEvent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          deviceId: true,
          eventData: true,
          eventType: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SensorEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSensorEvent(
    @common.Param() params: SensorEventWhereUniqueInput
  ): Promise<SensorEvent | null> {
    try {
      return await this.service.deleteSensorEvent({
        where: params,
        select: {
          createdAt: true,
          deviceId: true,
          eventData: true,
          eventType: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
